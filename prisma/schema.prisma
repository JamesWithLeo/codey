generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
enum Role {
  user
  admin
}
enum ORDER_STATUS {
  pending
  suspended
  shipped
  delivered
  canceled
	@@map("Status")
}
enum TRANSACTION_STATUS {
  pending
  suspended
  completed
  deleted
}

enum TRANSACTION_SOURCE {
  POS
  ONLINE
}
enum Category {
  handtools
  powertools
  materials
  electrical
  plumbing
  fasteners
  safetygears
  machineries
  others
}
model users {
  id        Int      @id @unique()@default(autoincrement())
  role      Role     @default(user)
  email     String   @unique
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  isOnline  Boolean  @default(true)  
  
  order     transaction[]  @relation("UserToOrders")
  carts     Cart[]        @relation("UserToCarts")
}

model product {
  id          Int      @id @unique @default(autoincrement())
  name        String  
  category    Category 
  price       Decimal  @db.Decimal(10, 2)
  description String
  thumbnail   String
  otherUrl    String[] @default([])
  stock       Int      
  brand       String
  isFeatured  Boolean  @default(false)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sales       Int      @default(0)

  orderItems  order[]  @relation("ProductOrderItems") // Relates to order items, not directly to orders
  cartItems CartItem[] @relation("ProductToCartItems")

}


model transaction {
  id           Int      @id @unique @default(autoincrement())
  status       TRANSACTION_STATUS @default(pending)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user_id      Int?
  users        users?    @relation("UserToOrders", fields: [user_id], references: [id])
  source       TRANSACTION_SOURCE     @default(ONLINE)

  orderItems   order[] @relation("OrderToOrderItems")
	@@map("order")
}

model order {
  id                  Int            @id @unique @default(autoincrement())
  total_price         Decimal        @db.Decimal(10, 2)
  quantity            Int
  product_name        String         @default("Product not specified, use id instead")
  isPaid              Boolean        @default(true)
  status              ORDER_STATUS   @default(pending)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  product_id          Int
  product             product        @relation("ProductOrderItems", fields: [product_id], references: [id])

  transaction_id      Int
  transaction         transaction    @relation("OrderToOrderItems", fields: [transaction_id], references: [id],onDelete: Cascade)
	@@map("OrderItem")
}


model Cart {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  user_id   Int
  user      users     @relation("UserToCarts", fields: [user_id], references: [id])


  cartItems     CartItem[]

}

model CartItem {
  id                  String            @id @default(cuid())
  quantity            Int
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  cart_id             String
  cart                Cart      @relation(fields: [cart_id], references: [id])
  
  product_id          Int
  product             product  @relation("ProductToCartItems", fields: [product_id], references: [id])
}
